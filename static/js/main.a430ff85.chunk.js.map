{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","lastSprintWorkingDays","setLastSprintWorkingDays","lastSprintHoliday","setLastSprintHoliday","teamSize","setTeamSize","leaveDays","setLeaveDays","completeStoryPoints","setCompleteStoryPoints","nextSprintWorkingDays","setNextSprintWorkingDays","nextSprintHoliday","setNextSprintHoliday","nextLeaveDays","setNextLeaveDays","nextTeamSize","setNextTeamSize","ippd","parseFloat","nextSprintCommitment","htmlFor","type","id","name","onChange","event","target","value","min","Boolean","window","location","hostname","match","theme","createTheme","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a430ff85.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  FormGroup,\n  Label,\n  Input,\n  Container,\n  Grid,\n  Cell,\n  H5,\n  Text\n} from \"styled-meow\";\n\nconst App = () => {\n  const [lastSprintWorkingDays, setLastSprintWorkingDays] = useState(\"10\");\n  const [lastSprintHoliday, setLastSprintHoliday] = useState(\"0\");\n  const [teamSize, setTeamSize] = useState(\"4\");\n  const [leaveDays, setLeaveDays] = useState(\"0\");\n  const [completeStoryPoints, setCompleteStoryPoints] = useState(\"99\");\n\n  const [nextSprintWorkingDays, setNextSprintWorkingDays] = useState(\"10\");\n  const [nextSprintHoliday, setNextSprintHoliday] = useState(\"0\");\n  const [nextLeaveDays, setNextLeaveDays] = useState(\"0\");\n  const [nextTeamSize, setNextTeamSize] = useState(\"4\");\n\n  const ippd =\n    completeStoryPoints /\n    (lastSprintWorkingDays -\n      (parseFloat(lastSprintHoliday) + parseFloat(leaveDays) / teamSize)) /\n    teamSize;\n\n  const nextSprintCommitment =\n    ippd *\n    nextTeamSize *\n    (nextSprintWorkingDays -\n      (parseFloat(nextSprintHoliday) +\n        parseFloat(nextLeaveDays) / nextTeamSize));\n\n  return (\n    <Container>\n      <Grid>\n        <Cell>\n          <FormGroup>\n            <Label htmlFor=\"lastSprintWorkingDays\">\n              Last Sprint Working Days\n            </Label>\n            <Input\n              type=\"number\"\n              id=\"lastSprintWorkingDays\"\n              name=\"lastSprintWorkingDays\"\n              onChange={event => setLastSprintWorkingDays(event.target.value)}\n              value={lastSprintWorkingDays}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"lastSprintHoliday\">Last Sprint Holiday</Label>\n            <Input\n              type=\"number\"\n              id=\"lastSprintHoliday\"\n              name=\"lastSprintHoliday\"\n              min=\"0\"\n              onChange={event => setLastSprintHoliday(event.target.value)}\n              value={lastSprintHoliday}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"teamSize\">Team size</Label>\n            <Input\n              type=\"number\"\n              id=\"teamSize\"\n              name=\"teamSize\"\n              min=\"0\"\n              onChange={event => setTeamSize(event.target.value)}\n              value={teamSize}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"leaveDays\">Individual Leave Days</Label>\n            <Input\n              type=\"number\"\n              id=\"leaveDays\"\n              name=\"leaveDays\"\n              min=\"0\"\n              onChange={event => setLeaveDays(event.target.value)}\n              value={leaveDays}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"completeStoryPoints\">Completed Story Points</Label>\n            <Input\n              type=\"number\"\n              id=\"completeStoryPoints\"\n              name=\"completeStoryPoints\"\n              min=\"0\"\n              onChange={event => setCompleteStoryPoints(event.target.value)}\n              value={completeStoryPoints}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"nextSprintWorkingDays\">\n              Next Sprint Working Days\n            </Label>\n            <Input\n              type=\"number\"\n              id=\"nextSprintWorkingDays\"\n              name=\"nextSprintWorkingDays\"\n              min=\"0\"\n              onChange={event => setNextSprintWorkingDays(event.target.value)}\n              value={nextSprintWorkingDays}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"nextSprintHoliday\">Next Sprint Holiday</Label>\n            <Input\n              type=\"number\"\n              id=\"nextSprintHoliday\"\n              name=\"nextSprintHoliday\"\n              min=\"0\"\n              onChange={event => setNextSprintHoliday(event.target.value)}\n              value={nextSprintHoliday}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"setNextLeaveDays\">Individual Leave Days</Label>\n            <Input\n              type=\"number\"\n              id=\"setNextLeaveDays\"\n              name=\"setNextLeaveDays\"\n              min=\"0\"\n              onChange={event => setNextLeaveDays(event.target.value)}\n              value={nextLeaveDays}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"nextTeamSize\">Next Sprint Team Size</Label>\n            <Input\n              type=\"number\"\n              id=\"nextTeamSize\"\n              name=\"nextTeamSize\"\n              min=\"0\"\n              onChange={event => setNextTeamSize(event.target.value)}\n              value={nextTeamSize}\n            />\n          </FormGroup>\n        </Cell>\n        <Cell>\n          <H5>Individual Point per Day</H5>\n          <Text>{ippd}</Text>\n          <H5>Next Sprint Commitment</H5>\n          <Text>{nextSprintCommitment}</Text>\n        </Cell>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport { createTheme, Normalize } from \"styled-meow\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst theme = createTheme();\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <>\n      <Normalize />\n      <App />\n    </>\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}